{"name":"Mau","tagline":"","body":"#Introducing Mau\r\nMau simplifies mapping objects to database queries.\r\n##Features\r\n* No database-specific implementation details. Should work with any ADO.NET provider (tested with SQL Server and MySQL).\r\n* No configuration.\r\n* Uses regular SQL - still the best domain specific language for relational data.\r\n* Supports parameterized text queries or stored procedures.\r\n* Automatically maps query results to Enumerable of:\r\n  * Strongly-typed objects, or\r\n  * Dynamic objects.\r\n* Transaction support through Context and Unit of Work objects.\r\n* IoC Friendly\r\n\r\n##Code Samples\r\n####Get an Context object:\r\n    var factory = new AppConfigConnectionFactory(\"connection-string-name\");\r\n    var context = new AdoNetContext(factory);\r\n####Execute a Query and Map the Result to a Strongly Typed Enumerable\r\n    var products = context.Query<Cat>(\r\n        \"SELECT * FROM Cats WHERE BreedId == @BreedId\",\r\n        new { BreedId = 1 });\r\n####Execute a Query and Map the Result to an Enumerable of Dynamic Objects\r\n    var products = context.Query(\r\n        \"SELECT * FROM Cats WHERE BreedId == @BreedId\",\r\n        new { BreedId = 2 });\r\n####Execute a Command That Returns a Scalar Value\r\n    var breedId = context.Scalar<int>(\r\n        \"INSERT INTO Breed(Name) VALUES(@Name); SELECT SCOPE_IDENTITY();\",\r\n        new { Name = \"Egyptian Mau\" });\r\n####Execute a Command That Doesn't Return Anything\r\n    context.Execute(\r\n        \"DELETE FROM Cat WHERE BreedId < @MinBreedId,\r\n        new { MinBreedId = 2 });\r\n####Execute Multiple Commands in a Transaction\r\n    var breed1 = new Breed { Name = \"Egyptian Mau\" };\r\n    var breed2 = new Breed { Name = \"Arabian Mau\" };\r\n    \r\n    var cat1 = new Cat\r\n    {\r\n        Name = \"Pharoh\",\r\n        Age = 4\r\n    };\r\n    \r\n    var cat2 = new Cat\r\n    {\r\n        Name = \"Tut\",\r\n        Age = 2\r\n    };\r\n    \r\n    var cat3 = new Cat\r\n    {\r\n        Name = \"Anas\",\r\n        Age = 8\r\n    };\r\n    \r\n    using(var uow = context.CreateUnitOfWork())\r\n    {\r\n        var sql = \"INSERT INTO Breed(Name) VALUES(@Name); SELECT @@SCOPE_IDENTITY()\";\r\n        \r\n        breed1.BreedId = context.Scalar<int>(sql, new { Name = breed1.Name })\r\n        breed2.BreedId = context.Scalar<int>(sql, new { Name = breed2.Name })\r\n        \r\n        cat1.BreedId = breed1.BreedId;\r\n        cat2.BreedId = breed1.BreedId;\r\n        cat3.BreedId = breed2.BreedId;\r\n        \r\n        sql = @\"INSERT INTO Cat(Name, Age, BreedId) VALUES(@Name, @Age, @BreedId)\";\r\n        \r\n        context.Execute(sql, new\r\n        {\r\n            Name = cat1.Name,\r\n            Age = cat1.Age,\r\n            BreedId = cat1.BreedId\r\n        });\r\n        \r\n        context.Execute(sql, new\r\n        {\r\n            Name = cat2.Name,\r\n            Age = cat2.Age,\r\n            BreedId = cat2.BreedId\r\n        });\r\n        \r\n        context.Execute(sql, new\r\n        {\r\n            Name = cat3.Name,\r\n            Age = cat3.Age,\r\n            BreedId = cat3.BreedId\r\n        });\r\n        \r\n        uow.SaveChanges();\r\n    }\r\n#### IoC Friendliness\r\n    var container = new UnityContainer();\r\n    container.RegisterType<IConnectionFactory, AppConfigConnectionFactory>(new ContainerControlledLifetimeManager(), new InjectionConstructor(\"ConnectionStringName\"));\r\n    container.RegisterType<IAdoNetContext, AdoNetContext>(new HierarchicalLifetimeManager());\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}